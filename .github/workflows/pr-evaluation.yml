name: PR Evaluation

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # Configurável via repository secrets
  EVALUATION_API_URL: ${{ secrets.EVALUATION_API_URL || 'https://claude-webhook-production.up.railway.app/evaluate-pullrequest' }}

jobs:
  evaluate-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better analysis
      
      - name: Get PR information
        id: pr-info
        run: |
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "pr_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
      
      - name: Display PR information
        run: |
          echo "🔍 PR Information:"
          echo "  Number: ${{ steps.pr-info.outputs.pr_number }}"
          echo "  Title: ${{ steps.pr-info.outputs.pr_title }}"
          echo "  Author: ${{ steps.pr-info.outputs.pr_author }}"
          echo "  Branch: ${{ steps.pr-info.outputs.pr_branch }}"
          echo "  Base: ${{ steps.pr-info.outputs.base_branch }}"
          echo "  URL: ${{ steps.pr-info.outputs.pr_url }}"
      
      - name: Call PR Evaluation API
        id: evaluate
        run: |
          echo "🚀 Calling PR Evaluation API..."
          echo "📍 API URL: ${{ env.EVALUATION_API_URL }}"
          
          response=$(curl -s -w "\n%{http_code}" \
            --location '${{ env.EVALUATION_API_URL }}' \
            --header 'Content-Type: application/json' \
            --header 'X-Webhook-Secret: ${{ secrets.WEBHOOK_SECRET }}' \
            --data "{
              \"prUrl\": \"${{ steps.pr-info.outputs.pr_url }}\",
              \"prNumber\": ${{ steps.pr-info.outputs.pr_number }},
              \"prTitle\": \"${{ steps.pr-info.outputs.pr_title }}\",
              \"prAuthor\": \"${{ steps.pr-info.outputs.pr_author }}\",
              \"prBranch\": \"${{ steps.pr-info.outputs.pr_branch }}\",
              \"baseBranch\": \"${{ steps.pr-info.outputs.base_branch }}\",
              \"repository\": \"${{ github.repository }}\"
            }")
          
          # Extract HTTP status code and response body
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          # Sanitize response body to remove control characters
          sanitized_response=$(echo "$response_body" | sed 's/[\x00-\x1F\x7F]//g')
          
          echo "📊 API Response:"
          echo "  Status Code: $http_code"
          echo "  Response: $sanitized_response"
          
          # Save response for next steps
          echo "api_response=$sanitized_response" >> $GITHUB_OUTPUT
          echo "api_status=$http_code" >> $GITHUB_OUTPUT
          
          # Check if API call was successful
          if [ "$http_code" -eq 200 ]; then
            echo "✅ PR evaluation completed successfully"
            echo "evaluation_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ PR evaluation failed with status code: $http_code"
            echo "evaluation_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Comment on PR with evaluation results
        if: always() && steps.evaluate.outputs.evaluation_status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const response = `${{ steps.evaluate.outputs.api_response }}`;
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};
            
            try {
              // Clean the response string before parsing
              const cleanResponse = response.replace(/[\x00-\x1F\x7F]/g, '');
              const data = JSON.parse(cleanResponse);
              
              let comment = `## 🤖 PR Evaluation Results\n\n`;
              comment += `**PR:** #${prNumber} - ${{ steps.pr-info.outputs.pr_title }}\n`;
              comment += `**Author:** @${{ steps.pr-info.outputs.pr_author }}\n`;
              comment += `**Branch:** \`${{ steps.pr-info.outputs.pr_branch }}\` → \`${{ steps.pr-info.outputs.base_branch }}\`\n\n`;
              
              if (data.evaluation) {
                comment += `### 📋 Evaluation Summary\n`;
                comment += `- **Overall Score:** ${data.evaluation.score || 'N/A'}/10\n`;
                comment += `- **Status:** ${data.evaluation.status || 'N/A'}\n\n`;
                
                if (data.evaluation.recommendations) {
                  comment += `### 💡 Recommendations\n`;
                  data.evaluation.recommendations.forEach((rec, index) => {
                    comment += `${index + 1}. ${rec}\n`;
                  });
                  comment += `\n`;
                }
                
                if (data.evaluation.issues) {
                  comment += `### ⚠️ Issues Found\n`;
                  data.evaluation.issues.forEach((issue, index) => {
                    comment += `${index + 1}. ${issue}\n`;
                  });
                  comment += `\n`;
                }
              }
              
              comment += `---\n`;
              comment += `*This evaluation was performed automatically by Claude AI.*`;
              
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              console.log('✅ Comment posted successfully');
            } catch (error) {
              console.error('❌ Error parsing API response:', error);
              console.error('Raw response:', response);
              console.error('Response length:', response.length);
              
              // Fallback comment with raw response info
              let fallbackComment = `## 🤖 PR Evaluation\n\n✅ PR evaluation completed successfully!\n\n**PR:** #${prNumber} - ${{ steps.pr-info.outputs.pr_title }}\n**Author:** @${{ steps.pr-info.outputs.pr_author }}\n\n`;
              
              // Try to extract basic info from response even if JSON parsing fails
              if (response.includes('success') && response.includes('true')) {
                fallbackComment += `**Status:** ✅ Success\n\n`;
              }
              
              fallbackComment += `*This evaluation was performed automatically by Claude AI.*\n\n`;
              fallbackComment += `*Note: Response parsing failed, but API call was successful.*`;
              
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fallbackComment
              });
            }
      
      - name: Handle evaluation failure
        if: always() && steps.evaluate.outputs.evaluation_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};
            
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 PR Evaluation\n\n❌ PR evaluation failed to complete.\n\n**PR:** #${prNumber} - ${{ steps.pr-info.outputs.pr_title }}\n**Author:** @${{ steps.pr-info.outputs.pr_author }}\n\n**Error:** API returned status code ${{ steps.evaluate.outputs.api_status }}\n\n*Please try again or contact the development team.*`
            });
      
      - name: Summary
        if: always()
        run: |
          echo "## 📊 PR Evaluation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number:** ${{ steps.pr-info.outputs.pr_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Title:** ${{ steps.pr-info.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ steps.pr-info.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.pr-info.outputs.pr_branch }} → ${{ steps.pr-info.outputs.base_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Evaluation Status:** ${{ steps.evaluate.outputs.evaluation_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Status Code:** ${{ steps.evaluate.outputs.api_status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.evaluate.outputs.evaluation_status }}" = "success" ]; then
            echo "✅ **Result:** PR evaluation completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Result:** PR evaluation failed!" >> $GITHUB_STEP_SUMMARY
          fi
